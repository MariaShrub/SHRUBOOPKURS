import { test, expect } from '@playwright/test';

test.describe('TournamentPage', () => {
  test.beforeEach(async ({ page }) => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await page.addInitScript(() => {
      const participants = [
        { id: '1', firstName: '–ò–≤–∞–Ω', lastName: '–ò–≤–∞–Ω–æ–≤', rating: 1500 },
        { id: '2', firstName: '–ü–µ—Ç—Ä', lastName: '–ü–µ—Ç—Ä–æ–≤', rating: 1400 },
        { id: '3', firstName: '–ê–Ω–Ω–∞', lastName: '–°–º–∏—Ä–Ω–æ–≤–∞', rating: 1600 },
        { id: '4', firstName: '–û–ª–µ–≥', lastName: '–°–∏–¥–æ—Ä–æ–≤', rating: 1450 },
        { id: '5', firstName: '–Æ–ª–∏—è', lastName: '–ö—É–∑–Ω–µ—Ü–æ–≤–∞', rating: 1350 },
        { id: '6', firstName: '–ú–∞–∫—Å–∏–º', lastName: '–û—Ä–ª–æ–≤', rating: 1550 },
        { id: '7', firstName: '–ï–ª–µ–Ω–∞', lastName: '–ù–æ–≤–∏–∫–æ–≤–∞', rating: 1480 },
        { id: 'empty-8', firstName: '–ü—É—Å—Ç–æ–π', lastName: '–£—á–∞—Å—Ç–Ω–∏–∫', rating: 0, isEmpty: true }
      ];

      const config = {
        participantsCount: 8,
        bracketType: 'rigid',
        tiebreakerType: 'rating',
        matchesInRound: 1
      };

      localStorage.setItem('tournamentParticipants', JSON.stringify(participants));
      localStorage.setItem('tournamentConfig', JSON.stringify(config));
    });

    // –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—É—Ä–Ω–∏—Ä–∞
    await page.goto('/tournament');
    await page.waitForSelector('.match-card', { state: 'visible', timeout: 30000 });
  });

  test('–ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞', async ({ page }) => {
    test.setTimeout(300000); // 5-minute timeout for stability

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const processMatch = async (matchLocator: any, matchIndex: number) => {
      console.log(`Processing match ${matchIndex}`);
      // –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –º–∞—Ç—á–∏ —Å –ø—É—Å—Ç—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
      if (await matchLocator.getByText('[–ü—É—Å—Ç–æ–π]').count() > 0) {
        console.log(`Match ${matchIndex} has empty participant, skipping`);
        return;
      }

      // –ù–∞–π–¥–∏—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
      const radioButton = matchLocator.locator('input[type="radio"]').first();
      await radioButton.waitFor({ state: 'attached', timeout: 20000 });
      await radioButton.click({ force: true });
      console.log(`Clicked radio button for match ${matchIndex}`);
      await page.waitForTimeout(1500); // Minimal delay for UI to process
    };

    // –ü—Ä–æ—Ü–µ—Å—Å –≤—Å–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    let currentRound = 1;
    while (currentRound <= 5) {
      console.log(`Starting round ${currentRound}`);

      // –°–æ–±–∏—Ä–∞–µ–º –º–∞—Ç—á–∏
      const matches = page.locator('.match-card');
      const matchCount = await matches.count();
      console.log(`Found ${matchCount} matches in round ${currentRound}`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á
      for (let i = 0; i < matchCount; i++) {
        await processMatch(matches.nth(i), i);
      }

      // –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ–º –ª–∏ –º—ã –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –º–∞—Ç—á–µ
      const finalMatchText = page.getByText('–§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á');
      if (await finalMatchText.isVisible()) {
        console.log('Final match detected');
        break; // Exit loop to handle final match separately
      }

      // –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
      const nextRoundButton = page.getByRole('button', { name: '–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥' });
      if (await nextRoundButton.isVisible()) {
        console.log('Clicking next round button');
        await nextRoundButton.click();
        currentRound++;
        await page.waitForTimeout(2500); // Wait for round transition
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á
    console.log('Processing final match');
    await page.waitForSelector('.match-card', { state: 'visible', timeout: 20000 });
    const finalMatch = page.locator('.match-card').first();
    const radioButton = finalMatch.locator('input[type="radio"]').first();
    await radioButton.waitFor({ state: 'attached', timeout: 20000 });
    await radioButton.click({ force: true });
    console.log('Clicked radio button for final match');
    await page.waitForTimeout(2500); // Wait for UI to process final match

    // Verify tournament completion
    await expect(page.getByText('üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ üèÜ')).toBeVisible({ timeout: 30000 });
    console.log('Tournament completed successfully');
  });

  test('–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏', async ({ page }) => {
    await expect(page.getByText('–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤')).toBeVisible();
    await expect(page.getByText('–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤')).toBeVisible();
    await expect(page.getByText('–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞')).toBeVisible();
    await expect(page.getByText('–ü—É—Å—Ç–æ–π –£—á–∞—Å—Ç–Ω–∏–∫')).toBeVisible();
    await expect(page.getByText('–í–µ—Ä—Ö–Ω—è—è —Å–µ—Ç–∫–∞ - –†–∞—É–Ω–¥ 1')).toBeVisible();
  });

  test('–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –º–∞—Ç—á–∏ —Å –ø—É—Å—Ç—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏', async ({ page }) => {
    const emptyMatches = page.locator('.match-card', { hasText: '[–ü—É—Å—Ç–æ–π]' });
    await expect(emptyMatches).toHaveCount(1);
  });
});